import requests

from data_collection_files.api_association_files.associations_adder import api2_cleaner

from testing_files.json_printer import json_printer

api_url = "https://classes.uconn.edu/api/?page=fose&route=search"


def api_call(filter_list, url):
    """
    Retrives raw couse info from Uconn's couse search API endpoint 
    For classes that fall under given prefrences specified in filter_list

    Args:
    filter_list (type: Array[2]): # Note. fitler_list is first created in init_interface.py's convert_query function.
        - Array[0] is another array containing dictionaries of user specified preferences, Ex. {"field": "campus","value": "Storrs (Main Campus at Storrs)"}
        - Array[1] contains encoded year and season, Ex. 1253 - Spring 2025
    
    Returns:
    if call successful: 
        raw_course_list (type: Array containing dictinaries of class info): #Ex. [{c1 info},{c2 info}]
    else
        raise ValueError
    """ 

    # Structure User Prefrences 
    data = {
        "other": {
            "srcdb": str(filter_list[1])
        },
        "criteria": filter_list[0]
    }

    # Send post request
    response = requests.post(url, json=data)
     
    if response.status_code == 200:
        # return raw_course_list if successful
        raw_course_list = response
        return raw_course_list
    else:
        # raise error
        raise ValueError

def orginizer(raw_course_list):
    """input: [{c1},{c1}]   ouput: {"cse 1010": [], "cse 1020": []}"""
    orgnized_cousre_list = {}
    for course in raw_course_list:
        if course["stat"] != "X":
            if (course["code"] in orgnized_cousre_list):
                orgnized_cousre_list[course["code"]].append(course)
            else:
                orgnized_cousre_list[course["code"]] = []
                orgnized_cousre_list[course["code"]].append(course)
    return orgnized_cousre_list




def send_to_cleaner(filter_list):
    """
    Send raw course information generated by api call to cleaner 
    where main classes (ex. lectures) and there independent componets 
    (ex. disscussion) are grouped together.

    Args:
    filter_list (type: Array[2]): # Note. fitler_list is first created in init_interface.py's convert_query function.
        - Array[0] is another array containing dictionaries of user specified preferences, Ex. {"field": "campus","value": "Storrs (Main Campus at Storrs)"}
        - Array[1] contains encoded year and season, Ex. 1253 - Spring 2025

    Returns:
    cleaned_course_list (type: Array containing dictinaries of main class, 
    along with there independent componets nested inside an array):    
    #Ex. cleaned_course_list = [{c1 info, "required": ["lab": [c3,c4], "DIS": [c5,c6]]}, {c6 info, "required": ["DIS": [c9]]}]
    """ 

    raw_course_list = api_call(filter_list, api_url)

    if (raw_course_list.status_code >= 400) or ("fatal" in raw_course_list.json()):
        raise TypeError
    else:
        raw_course_list = api_call(filter_list, api_url)
        orgnized_cousre_list = orginizer(raw_course_list.json()["results"])
        json_printer(raw_course_list.json()["results"], "sss")

        course_list_with_dependents = {}
        for key, value in orgnized_cousre_list.items():
            course_list_with_dependents.update(api2_cleaner(value))

        return course_list_with_dependents

    


if __name__ == "__main__":
    """ Demonstration Run """
    raw = api_call([[{'field': 'alias', 'value': 'CSE 1010'}, {'field': 'srcdb', 'value': '1253'}, {'field': 'camp', 'value': 'OFF@DARIENHIGH'}], '1253'])    
    #subject